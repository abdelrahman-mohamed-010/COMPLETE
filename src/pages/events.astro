---
import CallToAction from '../components/CallToAction.astro';
import PrimaryLayout from '../layouts/PrimaryLayout.astro';

const baseUrl = import.meta.env.STRAPI_URL_TWO;
const token = import.meta.env.ASTRO_APP_API_TOKEN_TWO;

const response = await fetch(`${baseUrl}/api/pages?populate[event][populate]=*`, {
  headers: {
    'Authorization': `Bearer ${token}`
  }
});

const { data } = await response.json();
const Event = data[0].event.find((item: any) => item.__component === "event.event");

interface ContentChild {
  type?: string;
  text?: string;
  bold?: boolean;
  url?: string;
  children?: ContentChild[];
}

interface ContentBlock {
  type: string;
  format?: 'ordered' | 'unordered';
  children: ContentChild[];
}

const typedContent = Event.content as ContentBlock[];
---

<PrimaryLayout>
  <main>
    <CallToAction />
    <div class="max-w-[1160px] mx-auto my-20 xl:px-8 px-4 lg:w-full sm:w-full flex flex-col prose prose-sm md:prose max-w-none">
      {typedContent && Array.isArray(typedContent) && typedContent.map((block: ContentBlock) => {
        if (block.type === 'list') {
          const ListTag = block.format === 'ordered' ? 'ol' : 'ul';
          return (
            <ListTag class="list-decimal ml-4 mb-4">
              {block.children.map((item: ContentChild) => (
                <li class="mb-2">
                  {item.children?.map((child: ContentChild) => {
                    if(child.type === 'link'){
                      const href = child.url?.trim() || '';
                      const isExternal = href.startsWith('http');
                      return (
                        <a 
                          class="text-[#ED2278]" 
                          href={href} 
                          {...(isExternal ? { target: "_blank", rel: "noopener noreferrer" } : {})}
                        >
                          {child.children ? child.children.map((sub: ContentChild) => (<span>{sub.text}</span>)) : child.text}
                        </a>
                      );
                    }
                    return child.bold ? <strong>{child.text}</strong> : <span>{child.text}</span>;
                  })}
                </li>
              ))}
            </ListTag>
          );
        }
        
        return block?.children?.length && (
          <p class="mb-4">
            {block.children.map((child: ContentChild) => {
              if(child.type === 'link'){
                const href = child.url?.trim() || '';
                const isExternal = href.startsWith('http');
                return (
                  <a 
                    class="text-[#ED2278]" 
                    href={href} 
                    {...(isExternal ? { target: "_blank", rel: "noopener noreferrer" } : {})}
                  >
                    {child.children ? child.children.map((sub: ContentChild) => (<span>{sub.text}</span>)) : child.text}
                  </a>
                );
              }
              return child.bold ? <strong>{child.text}</strong> : <span>{child.text}</span>;
            })}
          </p>
        );
      })}
    </div>
  </main>
</PrimaryLayout>
